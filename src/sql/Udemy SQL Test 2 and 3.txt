This file contains my solutions to the tests from the Udemy course 'The Complete SQL Bootcamp'. The answers are provided in the course, but these are my answers, which occasionally differ. I keep them here as a reference. The first test set is not included, as they are extremely simple.

SQL SECOND ASSESSMENT TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. How can you retrieve all the information from the cd.facilities table?

SELECT * FROM cd.facilities;

2. You want to print out a list of all of the facilities and their cost to members. How would you retrieve a list of only facility names and costs?

SELECT name, membercost FROM cd.facilities;

3. How can you produce a list of facilities that charge a fee to members?

SELECT name, membercost FROM cd.facilities
WHERE membercost > 0;

4. How can you produce a list of facilities that charge a fee to members, and that fee is less than 1/50th of the monthly maintenance cost? Return the facid, facility name, member cost, and monthly maintenance of the facilities in question.

SELECT facid, name, membercost, AVG(monthlymaintenance) FROM cd.facilities
WHERE membercost > 0 
GROUP BY facid
HAVING membercost < AVG(monthlymaintenance) / 50;

5. How can you produce a list of all facilities with the word 'Tennis' in their name?

select name from cd.facilities 
where name ilike '%tennis%';

6. How can you retrieve the details of facilities with ID 1 and 5? Try to do it without using the OR operator.

select * from cd.facilities
where facid in (1,5);

7. How can you produce a list of members who joined after the start of September 2012? Return the memid, surname, firstname, and joindate of the members in question.

select memid, surname, firstname, joindate from cd.members
where joindate > '2012-09-1';

8. How can you produce an ordered list of the first 10 surnames in the members table? The list must not contain duplicates.

select distinct surname from cd.members
order by surname asc
limit 10;

9. You'd like to get the signup date of your last member. How can you retrieve this information?

select joindate from cd.members
order by memid desc
limit 1;

OR 

select max(joindate) as latest from cd.members;

10. Produce a count of the number of facilities that have a cost to guests of 10 or more.

select COUNT(*) from cd.facilities
where guestcost >= 10;

11. Skip this one, no question for #11.

uhh okay

12. Produce a list of the total number of slots booked per facility in the month of September 2012. Produce an output table consisting of facility id and slots, sorted by the number of slots.

select sum(slots), facid from cd.bookings
where extract(month from starttime) = 9
group by facid
order by sum(slots);

13. Produce a list of facilities with more than 1000 slots booked. Produce an output table consisting of facility id and total slots, sorted by facility id.

select facid, sum(slots) as TotalSlots from cd.bookings
group by facid
having sum(slots) > 1000
order by facid;

14. How can you produce a list of the start times for bookings for tennis courts, for the date '2012-09-21'? Return a list of start time and facility name pairings, ordered by the time.

select name, starttime from cd.facilities as a
inner join cd.bookings as b 
on a.facid = b.facid
where a.facid < 2 and date(starttime) = '2012-09-21'
order by starttime;

15. How can you produce a list of the start times for bookings by members named 'David Farrell'?

select starttime from cd.bookings as a
inner join cd.members as b
on a.memid = b.memid
where b.firstname = 'David' and b.surname = 'Farrell';

SQL THIRD ASSESSMENT TEST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CREATE TABLE students(
	student_id serial PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(100) NOT NULL,
	homeroom_number integer NOT NULL,
	phone VARCHAR(15) NOT NULL UNIQUE,
	email VARCHAR(200) UNIQUE,
	graduation_year TIMESTAMP NOT NULL
);

CREATE TABLE teachers(
	teacher_id serial PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(100) NOT NULL,
	homeroom_number integer NOT NULL,
	department VARCHAR(100) NOT NULL,
	phone VARCHAR(15) NOT NULL UNIQUE,
	email VARCHAR(200) UNIQUE
);

INSERT INTO students (first_name, last_name, homeroom_number, phone, email, graduation_year)
VALUES ('Mark', 'Watney', 5, '777-555-1234', null, '2035-06-30');

INSERT INTO teachers (first_name, last_name, homeroom_number, department, phone, email)
VALUES ('Jonas', 'Salk', 5, 'Biology', '777-555-4321', 'jsalk@school.org');